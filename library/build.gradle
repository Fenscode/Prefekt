plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-3"
}

apply plugin: 'com.android.library'
apply plugin: "kotlin-android"
apply plugin: 'de.mannodermaus.android-junit5'
apply plugin: "jacoco-android"
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

android {
    compileSdkVersion Versions.compileSdkVersion

    defaultConfig {
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionString

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        junitPlatform {
            jupiterVersion "5.0.3"
            unitTests.applyDefaultTestOptions true
            instrumentationTests.version = "0.1.2-SNAPSHOT"
            jacocoOptions {
                xml {
                    enabled true
                    destination project.file("${buildDir}/reports/jacoco/report.xml")
                }
                html {
                    enabled true
                    destination project.file("${buildDir}/reports/jacoco/report.html")
                }
                csv {
                    enabled false
                    destination project.file("${buildDir}/reports/jacoco/report.csv")
                }
            }
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

detekt {
    version = Versions.detekt
    profile("main") {
        input = "$projectDir/src/main/java"
        config = "$project.rootDir/detekt.yml"
        output = "$project.buildDir/reports/detekt.xml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    //source = android.sourceSets.main.java.srcDirs
    //classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    sourceDirs = files('src/main/java')
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    includeNonPublic = false
    packageOptions {
        prefix = "com.stylingandroid.prefekt"
        includeNonPublic = false
    }
    packageOptions {
        prefix = "com.stylingandroid.library"
        suppress = true
    }
    packageOptions {
        prefix = "android"
        suppress = true
    }
}

task dokkaJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

publishing {
    publications {
        Prefekt(MavenPublication) {
            groupId 'com.stylingandroid.prefekt'
            artifactId 'prefekt'
            version Versions.versionString
            artifact("$buildDir/outputs/aar/library-release.aar")
            artifact sourceJar
            artifact dokkaJar
        }
    }
}

dependencies {
    implementation Libs.kotlin_stdlib
    implementation (Libs.appcompat, {
        exclude group: 'android.arch.lifecycle', module: 'runtime'
    })
    kapt Libs.lifecycle_compiler
    api Libs.lifecycle_runtime
    implementation Libs.lifecycle_extensions
    implementation Libs.kotlin_coroutines_core
    implementation Libs.kotlin_coroutines_android
    testImplementation junit5.unitTests()
    testCompileOnly junit5.unitTestsRuntime()
    testImplementation Libs.kluent
    testImplementation Libs.arch_core_testing
    testImplementation Libs.robolectric
    testImplementation Libs.mockito
}

check.dependsOn detektCheck

apply from: '../bintray.gradle'
